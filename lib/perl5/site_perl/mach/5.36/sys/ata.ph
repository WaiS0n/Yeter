require '_h2ph_pre.ph';

no warnings qw(redefine misc);

unless(defined(&_SYS_ATA_H_)) {
    eval 'sub _SYS_ATA_H_ () {1;}' unless defined(&_SYS_ATA_H_);
    require 'sys/types.ph';
    require 'sys/ioccom.ph';
    eval 'sub ATA_PROTO_MASK () {0x8003;}' unless defined(&ATA_PROTO_MASK);
    eval 'sub ATA_PROTO_ATAPI () {0x8000;}' unless defined(&ATA_PROTO_ATAPI);
    eval 'sub ATA_PROTO_ATAPI_12 () {0x8000;}' unless defined(&ATA_PROTO_ATAPI_12);
    eval 'sub ATA_PROTO_ATAPI_16 () {0x8001;}' unless defined(&ATA_PROTO_ATAPI_16);
    eval 'sub ATA_PROTO_CFA () {0x848a;}' unless defined(&ATA_PROTO_CFA);
    eval 'sub ATA_ATAPI_TYPE_MASK () {0x1f00;}' unless defined(&ATA_ATAPI_TYPE_MASK);
    eval 'sub ATA_ATAPI_TYPE_DIRECT () {0x;}' unless defined(&ATA_ATAPI_TYPE_DIRECT);
    eval 'sub ATA_ATAPI_TYPE_TAPE () {0x100;}' unless defined(&ATA_ATAPI_TYPE_TAPE);
    eval 'sub ATA_ATAPI_TYPE_CDROM () {0x500;}' unless defined(&ATA_ATAPI_TYPE_CDROM);
    eval 'sub ATA_ATAPI_TYPE_OPTICAL () {0x700;}' unless defined(&ATA_ATAPI_TYPE_OPTICAL);
    eval 'sub ATA_ATAPI_REMOVABLE () {0x80;}' unless defined(&ATA_ATAPI_REMOVABLE);
    eval 'sub ATA_DRQ_MASK () {0x60;}' unless defined(&ATA_DRQ_MASK);
    eval 'sub ATA_DRQ_SLOW () {0x;}' unless defined(&ATA_DRQ_SLOW);
    eval 'sub ATA_DRQ_INTR () {0x20;}' unless defined(&ATA_DRQ_INTR);
    eval 'sub ATA_DRQ_FAST () {0x40;}' unless defined(&ATA_DRQ_FAST);
    eval 'sub ATA_RESP_INCOMPLETE () {0x4;}' unless defined(&ATA_RESP_INCOMPLETE);
    eval 'sub ATA_SUPPORT_TCG () {0x1;}' unless defined(&ATA_SUPPORT_TCG);
    eval 'sub ATA_SUPPORT_DMA () {0x100;}' unless defined(&ATA_SUPPORT_DMA);
    eval 'sub ATA_SUPPORT_LBA () {0x200;}' unless defined(&ATA_SUPPORT_LBA);
    eval 'sub ATA_SUPPORT_IORDYDIS () {0x400;}' unless defined(&ATA_SUPPORT_IORDYDIS);
    eval 'sub ATA_SUPPORT_IORDY () {0x800;}' unless defined(&ATA_SUPPORT_IORDY);
    eval 'sub ATA_SUPPORT_OVERLAP () {0x4000;}' unless defined(&ATA_SUPPORT_OVERLAP);
    eval 'sub ATA_RETIRED_PIO_MASK () {0x300;}' unless defined(&ATA_RETIRED_PIO_MASK);
    eval 'sub ATA_RETIRED_DMA_MASK () {0x3;}' unless defined(&ATA_RETIRED_DMA_MASK);
    eval 'sub ATA_FLAG_54_58 () {0x1;}' unless defined(&ATA_FLAG_54_58);
    eval 'sub ATA_FLAG_64_70 () {0x2;}' unless defined(&ATA_FLAG_64_70);
    eval 'sub ATA_FLAG_88 () {0x4;}' unless defined(&ATA_FLAG_88);
    eval 'sub ATA_SUPPORT_BLOCK_ERASE_EXT () {0x8000;}' unless defined(&ATA_SUPPORT_BLOCK_ERASE_EXT);
    eval 'sub ATA_SUPPORT_OVERWRITE_EXT () {0x4000;}' unless defined(&ATA_SUPPORT_OVERWRITE_EXT);
    eval 'sub ATA_SUPPORT_CRYPTO_SCRAMBLE_EXT () {0x2000;}' unless defined(&ATA_SUPPORT_CRYPTO_SCRAMBLE_EXT);
    eval 'sub ATA_SUPPORT_SANITIZE () {0x1000;}' unless defined(&ATA_SUPPORT_SANITIZE);
    eval 'sub ATA_SUPPORT_SANITIZE_ALLOWED () {0x800;}' unless defined(&ATA_SUPPORT_SANITIZE_ALLOWED);
    eval 'sub ATA_SUPPORT_ANTIFREEZE_LOCK_EXT () {0x400;}' unless defined(&ATA_SUPPORT_ANTIFREEZE_LOCK_EXT);
    eval 'sub ATA_MULTI_VALID () {0x100;}' unless defined(&ATA_MULTI_VALID);
    eval 'sub ATA_SUPPORT_RZAT () {0x20;}' unless defined(&ATA_SUPPORT_RZAT);
    eval 'sub ATA_SUPPORT_DRAT () {0x4000;}' unless defined(&ATA_SUPPORT_DRAT);
    eval 'sub ATA_ENCRYPTS_ALL_USER_DATA () {0x10;}' unless defined(&ATA_ENCRYPTS_ALL_USER_DATA);
    eval 'sub ATA_SUPPORT_ZONE_MASK () {0x3;}' unless defined(&ATA_SUPPORT_ZONE_MASK);
    eval 'sub ATA_SUPPORT_ZONE_NR () {0x;}' unless defined(&ATA_SUPPORT_ZONE_NR);
    eval 'sub ATA_SUPPORT_ZONE_HOST_AWARE () {0x1;}' unless defined(&ATA_SUPPORT_ZONE_HOST_AWARE);
    eval 'sub ATA_SUPPORT_ZONE_DEV_MANAGED () {0x2;}' unless defined(&ATA_SUPPORT_ZONE_DEV_MANAGED);
    eval 'sub ATA_QUEUE_LEN {
        my($x) = @_;
	    eval q((($x) & 0x1f));
    }' unless defined(&ATA_QUEUE_LEN);
    eval 'sub ATA_SATA_GEN1 () {0x2;}' unless defined(&ATA_SATA_GEN1);
    eval 'sub ATA_SATA_GEN2 () {0x4;}' unless defined(&ATA_SATA_GEN2);
    eval 'sub ATA_SATA_GEN3 () {0x8;}' unless defined(&ATA_SATA_GEN3);
    eval 'sub ATA_SUPPORT_NCQ () {0x100;}' unless defined(&ATA_SUPPORT_NCQ);
    eval 'sub ATA_SUPPORT_IFPWRMNGTRCV () {0x200;}' unless defined(&ATA_SUPPORT_IFPWRMNGTRCV);
    eval 'sub ATA_SUPPORT_PHYEVENTCNT () {0x400;}' unless defined(&ATA_SUPPORT_PHYEVENTCNT);
    eval 'sub ATA_SUPPORT_NCQ_UNLOAD () {0x800;}' unless defined(&ATA_SUPPORT_NCQ_UNLOAD);
    eval 'sub ATA_SUPPORT_NCQ_PRIO () {0x1000;}' unless defined(&ATA_SUPPORT_NCQ_PRIO);
    eval 'sub ATA_SUPPORT_HAPST () {0x2000;}' unless defined(&ATA_SUPPORT_HAPST);
    eval 'sub ATA_SUPPORT_DAPST () {0x4000;}' unless defined(&ATA_SUPPORT_DAPST);
    eval 'sub ATA_SUPPORT_READLOGDMAEXT () {0x8000;}' unless defined(&ATA_SUPPORT_READLOGDMAEXT);
    eval 'sub ATA_SATA_CURR_GEN_MASK () {0x6;}' unless defined(&ATA_SATA_CURR_GEN_MASK);
    eval 'sub ATA_SUPPORT_NCQ_STREAM () {0x10;}' unless defined(&ATA_SUPPORT_NCQ_STREAM);
    eval 'sub ATA_SUPPORT_NCQ_NON_DATA () {0x20;}' unless defined(&ATA_SUPPORT_NCQ_NON_DATA);
    eval 'sub ATA_SUPPORT_NCQ_QMANAGEMENT () { &ATA_SUPPORT_NCQ_NON_DATA;}' unless defined(&ATA_SUPPORT_NCQ_QMANAGEMENT);
    eval 'sub ATA_SUPPORT_RCVSND_FPDMA_QUEUED () {0x40;}' unless defined(&ATA_SUPPORT_RCVSND_FPDMA_QUEUED);
    eval 'sub ATA_SUPPORT_NONZERO () {0x2;}' unless defined(&ATA_SUPPORT_NONZERO);
    eval 'sub ATA_SUPPORT_AUTOACTIVATE () {0x4;}' unless defined(&ATA_SUPPORT_AUTOACTIVATE);
    eval 'sub ATA_SUPPORT_IFPWRMNGT () {0x8;}' unless defined(&ATA_SUPPORT_IFPWRMNGT);
    eval 'sub ATA_SUPPORT_INORDERDATA () {0x10;}' unless defined(&ATA_SUPPORT_INORDERDATA);
    eval 'sub ATA_SUPPORT_ASYNCNOTIF () {0x20;}' unless defined(&ATA_SUPPORT_ASYNCNOTIF);
    eval 'sub ATA_SUPPORT_SOFTSETPRESERVE () {0x40;}' unless defined(&ATA_SUPPORT_SOFTSETPRESERVE);
    eval 'sub ATA_SUPPORT_NCQ_AUTOSENSE () {0x80;}' unless defined(&ATA_SUPPORT_NCQ_AUTOSENSE);
    eval 'sub ATA_ENABLED_DAPST () {0x80;}' unless defined(&ATA_ENABLED_DAPST);
    eval 'sub ATA_SUPPORT_SMART () {0x1;}' unless defined(&ATA_SUPPORT_SMART);
    eval 'sub ATA_SUPPORT_SECURITY () {0x2;}' unless defined(&ATA_SUPPORT_SECURITY);
    eval 'sub ATA_SUPPORT_REMOVABLE () {0x4;}' unless defined(&ATA_SUPPORT_REMOVABLE);
    eval 'sub ATA_SUPPORT_POWERMGT () {0x8;}' unless defined(&ATA_SUPPORT_POWERMGT);
    eval 'sub ATA_SUPPORT_PACKET () {0x10;}' unless defined(&ATA_SUPPORT_PACKET);
    eval 'sub ATA_SUPPORT_WRITECACHE () {0x20;}' unless defined(&ATA_SUPPORT_WRITECACHE);
    eval 'sub ATA_SUPPORT_LOOKAHEAD () {0x40;}' unless defined(&ATA_SUPPORT_LOOKAHEAD);
    eval 'sub ATA_SUPPORT_RELEASEIRQ () {0x80;}' unless defined(&ATA_SUPPORT_RELEASEIRQ);
    eval 'sub ATA_SUPPORT_SERVICEIRQ () {0x100;}' unless defined(&ATA_SUPPORT_SERVICEIRQ);
    eval 'sub ATA_SUPPORT_RESET () {0x200;}' unless defined(&ATA_SUPPORT_RESET);
    eval 'sub ATA_SUPPORT_PROTECTED () {0x400;}' unless defined(&ATA_SUPPORT_PROTECTED);
    eval 'sub ATA_SUPPORT_WRITEBUFFER () {0x1000;}' unless defined(&ATA_SUPPORT_WRITEBUFFER);
    eval 'sub ATA_SUPPORT_READBUFFER () {0x2000;}' unless defined(&ATA_SUPPORT_READBUFFER);
    eval 'sub ATA_SUPPORT_NOP () {0x4000;}' unless defined(&ATA_SUPPORT_NOP);
    eval 'sub ATA_SUPPORT_MICROCODE () {0x1;}' unless defined(&ATA_SUPPORT_MICROCODE);
    eval 'sub ATA_SUPPORT_QUEUED () {0x2;}' unless defined(&ATA_SUPPORT_QUEUED);
    eval 'sub ATA_SUPPORT_CFA () {0x4;}' unless defined(&ATA_SUPPORT_CFA);
    eval 'sub ATA_SUPPORT_APM () {0x8;}' unless defined(&ATA_SUPPORT_APM);
    eval 'sub ATA_SUPPORT_NOTIFY () {0x10;}' unless defined(&ATA_SUPPORT_NOTIFY);
    eval 'sub ATA_SUPPORT_STANDBY () {0x20;}' unless defined(&ATA_SUPPORT_STANDBY);
    eval 'sub ATA_SUPPORT_SPINUP () {0x40;}' unless defined(&ATA_SUPPORT_SPINUP);
    eval 'sub ATA_SUPPORT_MAXSECURITY () {0x100;}' unless defined(&ATA_SUPPORT_MAXSECURITY);
    eval 'sub ATA_SUPPORT_AUTOACOUSTIC () {0x200;}' unless defined(&ATA_SUPPORT_AUTOACOUSTIC);
    eval 'sub ATA_SUPPORT_ADDRESS48 () {0x400;}' unless defined(&ATA_SUPPORT_ADDRESS48);
    eval 'sub ATA_SUPPORT_OVERLAY () {0x800;}' unless defined(&ATA_SUPPORT_OVERLAY);
    eval 'sub ATA_SUPPORT_FLUSHCACHE () {0x1000;}' unless defined(&ATA_SUPPORT_FLUSHCACHE);
    eval 'sub ATA_SUPPORT_FLUSHCACHE48 () {0x2000;}' unless defined(&ATA_SUPPORT_FLUSHCACHE48);
    eval 'sub ATA_SUPPORT_SMARTLOG () {0x1;}' unless defined(&ATA_SUPPORT_SMARTLOG);
    eval 'sub ATA_SUPPORT_SMARTTEST () {0x2;}' unless defined(&ATA_SUPPORT_SMARTTEST);
    eval 'sub ATA_SUPPORT_MEDIASN () {0x4;}' unless defined(&ATA_SUPPORT_MEDIASN);
    eval 'sub ATA_SUPPORT_MEDIAPASS () {0x8;}' unless defined(&ATA_SUPPORT_MEDIAPASS);
    eval 'sub ATA_SUPPORT_STREAMING () {0x10;}' unless defined(&ATA_SUPPORT_STREAMING);
    eval 'sub ATA_SUPPORT_GENLOG () {0x20;}' unless defined(&ATA_SUPPORT_GENLOG);
    eval 'sub ATA_SUPPORT_WRITEDMAFUAEXT () {0x40;}' unless defined(&ATA_SUPPORT_WRITEDMAFUAEXT);
    eval 'sub ATA_SUPPORT_WRITEDMAQFUAEXT () {0x80;}' unless defined(&ATA_SUPPORT_WRITEDMAQFUAEXT);
    eval 'sub ATA_SUPPORT_64BITWWN () {0x100;}' unless defined(&ATA_SUPPORT_64BITWWN);
    eval 'sub ATA_SUPPORT_UNLOAD () {0x2000;}' unless defined(&ATA_SUPPORT_UNLOAD);
    eval 'sub ATA_CABLE_ID () {0x2000;}' unless defined(&ATA_CABLE_ID);
    eval 'sub ATA_ACOUSTIC_CURRENT {
        my($x) = @_;
	    eval q((($x) & 0xff));
    }' unless defined(&ATA_ACOUSTIC_CURRENT);
    eval 'sub ATA_ACOUSTIC_VENDOR {
        my($x) = @_;
	    eval q(((($x) & 0xff00) >> 8));
    }' unless defined(&ATA_ACOUSTIC_VENDOR);
    eval 'sub ATA_PSS_LSPPS () {0xf;}' unless defined(&ATA_PSS_LSPPS);
    eval 'sub ATA_PSS_LSSABOVE512 () {0x1000;}' unless defined(&ATA_PSS_LSSABOVE512);
    eval 'sub ATA_PSS_MULTLS () {0x2000;}' unless defined(&ATA_PSS_MULTLS);
    eval 'sub ATA_PSS_VALID_MASK () {0xc000;}' unless defined(&ATA_PSS_VALID_MASK);
    eval 'sub ATA_PSS_VALID_VALUE () {0x4000;}' unless defined(&ATA_PSS_VALID_VALUE);
    eval 'sub ATA_SUPPORT_WRITEREADVERIFY () {0x2;}' unless defined(&ATA_SUPPORT_WRITEREADVERIFY);
    eval 'sub ATA_SUPPORT_WRITEUNCORREXT () {0x4;}' unless defined(&ATA_SUPPORT_WRITEUNCORREXT);
    eval 'sub ATA_SUPPORT_RWLOGDMAEXT () {0x8;}' unless defined(&ATA_SUPPORT_RWLOGDMAEXT);
    eval 'sub ATA_SUPPORT_MICROCODE3 () {0x10;}' unless defined(&ATA_SUPPORT_MICROCODE3);
    eval 'sub ATA_SUPPORT_FREEFALL () {0x20;}' unless defined(&ATA_SUPPORT_FREEFALL);
    eval 'sub ATA_SUPPORT_SENSE_REPORT () {0x40;}' unless defined(&ATA_SUPPORT_SENSE_REPORT);
    eval 'sub ATA_SUPPORT_EPC () {0x80;}' unless defined(&ATA_SUPPORT_EPC);
    eval 'sub ATA_SUPPORT_AMAX_ADDR () {0x100;}' unless defined(&ATA_SUPPORT_AMAX_ADDR);
    eval 'sub ATA_SUPPORT_DSN () {0x200;}' unless defined(&ATA_SUPPORT_DSN);
    eval 'sub ATA_ENABLED_WRITEREADVERIFY () {0x2;}' unless defined(&ATA_ENABLED_WRITEREADVERIFY);
    eval 'sub ATA_ENABLED_WRITEUNCORREXT () {0x4;}' unless defined(&ATA_ENABLED_WRITEUNCORREXT);
    eval 'sub ATA_ENABLED_FREEFALL () {0x20;}' unless defined(&ATA_ENABLED_FREEFALL);
    eval 'sub ATA_ENABLED_SENSE_REPORT () {0x40;}' unless defined(&ATA_ENABLED_SENSE_REPORT);
    eval 'sub ATA_ENABLED_EPC () {0x80;}' unless defined(&ATA_ENABLED_EPC);
    eval 'sub ATA_ENABLED_DSN () {0x200;}' unless defined(&ATA_ENABLED_DSN);
    eval 'sub ATA_SECURITY_LEVEL () {0x100;}' unless defined(&ATA_SECURITY_LEVEL);
    eval 'sub ATA_SECURITY_ENH_SUPP () {0x20;}' unless defined(&ATA_SECURITY_ENH_SUPP);
    eval 'sub ATA_SECURITY_COUNT_EXP () {0x10;}' unless defined(&ATA_SECURITY_COUNT_EXP);
    eval 'sub ATA_SECURITY_FROZEN () {0x8;}' unless defined(&ATA_SECURITY_FROZEN);
    eval 'sub ATA_SECURITY_LOCKED () {0x4;}' unless defined(&ATA_SECURITY_LOCKED);
    eval 'sub ATA_SECURITY_ENABLED () {0x2;}' unless defined(&ATA_SECURITY_ENABLED);
    eval 'sub ATA_SECURITY_SUPPORTED () {0x1;}' unless defined(&ATA_SECURITY_SUPPORTED);
    eval 'sub ATA_FORM_FACTOR_MASK () {0xf;}' unless defined(&ATA_FORM_FACTOR_MASK);
    eval 'sub ATA_FORM_FACTOR_NOT_REPORTED () {0x;}' unless defined(&ATA_FORM_FACTOR_NOT_REPORTED);
    eval 'sub ATA_FORM_FACTOR_5_25 () {0x1;}' unless defined(&ATA_FORM_FACTOR_5_25);
    eval 'sub ATA_FORM_FACTOR_3_5 () {0x2;}' unless defined(&ATA_FORM_FACTOR_3_5);
    eval 'sub ATA_FORM_FACTOR_2_5 () {0x3;}' unless defined(&ATA_FORM_FACTOR_2_5);
    eval 'sub ATA_FORM_FACTOR_1_8 () {0x4;}' unless defined(&ATA_FORM_FACTOR_1_8);
    eval 'sub ATA_FORM_FACTOR_SUB_1_8 () {0x5;}' unless defined(&ATA_FORM_FACTOR_SUB_1_8);
    eval 'sub ATA_FORM_FACTOR_MSATA () {0x6;}' unless defined(&ATA_FORM_FACTOR_MSATA);
    eval 'sub ATA_FORM_FACTOR_M_2 () {0x7;}' unless defined(&ATA_FORM_FACTOR_M_2);
    eval 'sub ATA_FORM_FACTOR_MICRO_SSD () {0x8;}' unless defined(&ATA_FORM_FACTOR_MICRO_SSD);
    eval 'sub ATA_FORM_FACTOR_C_FAST () {0x9;}' unless defined(&ATA_FORM_FACTOR_C_FAST);
    eval 'sub ATA_SUPPORT_DSM_TRIM () {0x1;}' unless defined(&ATA_SUPPORT_DSM_TRIM);
    eval 'sub ATA_RATE_NOT_REPORTED () {0x;}' unless defined(&ATA_RATE_NOT_REPORTED);
    eval 'sub ATA_RATE_NON_ROTATING () {0x1;}' unless defined(&ATA_RATE_NON_ROTATING);
    eval 'sub ATA_DSM_BLK_SIZE () {512;}' unless defined(&ATA_DSM_BLK_SIZE);
    eval 'sub ATA_DSM_BLK_RANGES () {64;}' unless defined(&ATA_DSM_BLK_RANGES);
    eval 'sub ATA_DSM_RANGE_SIZE () {8;}' unless defined(&ATA_DSM_RANGE_SIZE);
    eval 'sub ATA_DSM_RANGE_MAX () {65535;}' unless defined(&ATA_DSM_RANGE_MAX);
    eval 'sub ATA_DEV_MASTER () {0x;}' unless defined(&ATA_DEV_MASTER);
    eval 'sub ATA_DEV_SLAVE () {0x10;}' unless defined(&ATA_DEV_SLAVE);
    eval 'sub ATA_DEV_LBA () {0x40;}' unless defined(&ATA_DEV_LBA);
    eval 'sub ATA_MAX_28BIT_LBA () {268435455;}' unless defined(&ATA_MAX_28BIT_LBA);
    eval 'sub ATA_STATUS_ERROR () {0x1;}' unless defined(&ATA_STATUS_ERROR);
    eval 'sub ATA_STATUS_SENSE_AVAIL () {0x2;}' unless defined(&ATA_STATUS_SENSE_AVAIL);
    eval 'sub ATA_STATUS_ALIGN_ERR () {0x4;}' unless defined(&ATA_STATUS_ALIGN_ERR);
    eval 'sub ATA_STATUS_DATA_REQ () {0x8;}' unless defined(&ATA_STATUS_DATA_REQ);
    eval 'sub ATA_STATUS_DEF_WRITE_ERR () {0x10;}' unless defined(&ATA_STATUS_DEF_WRITE_ERR);
    eval 'sub ATA_STATUS_DEVICE_FAULT () {0x20;}' unless defined(&ATA_STATUS_DEVICE_FAULT);
    eval 'sub ATA_STATUS_DEVICE_READY () {0x40;}' unless defined(&ATA_STATUS_DEVICE_READY);
    eval 'sub ATA_STATUS_BUSY () {0x80;}' unless defined(&ATA_STATUS_BUSY);
    eval 'sub ATA_ERROR_ABORT () {0x4;}' unless defined(&ATA_ERROR_ABORT);
    eval 'sub ATA_ERROR_ID_NOT_FOUND () {0x10;}' unless defined(&ATA_ERROR_ID_NOT_FOUND);
    eval 'sub ATA_HPA_FEAT_MAX_ADDR () {0x;}' unless defined(&ATA_HPA_FEAT_MAX_ADDR);
    eval 'sub ATA_HPA_FEAT_SET_PWD () {0x1;}' unless defined(&ATA_HPA_FEAT_SET_PWD);
    eval 'sub ATA_HPA_FEAT_LOCK () {0x2;}' unless defined(&ATA_HPA_FEAT_LOCK);
    eval 'sub ATA_HPA_FEAT_UNLOCK () {0x3;}' unless defined(&ATA_HPA_FEAT_UNLOCK);
    eval 'sub ATA_HPA_FEAT_FREEZE () {0x4;}' unless defined(&ATA_HPA_FEAT_FREEZE);
    eval 'sub ATA_MODE_MASK () {0xf;}' unless defined(&ATA_MODE_MASK);
    eval 'sub ATA_DMA_MASK () {0xf0;}' unless defined(&ATA_DMA_MASK);
    eval 'sub ATA_PIO () {0x;}' unless defined(&ATA_PIO);
    eval 'sub ATA_PIO0 () {0x8;}' unless defined(&ATA_PIO0);
    eval 'sub ATA_PIO1 () {0x9;}' unless defined(&ATA_PIO1);
    eval 'sub ATA_PIO2 () {0xa;}' unless defined(&ATA_PIO2);
    eval 'sub ATA_PIO3 () {0xb;}' unless defined(&ATA_PIO3);
    eval 'sub ATA_PIO4 () {0xc;}' unless defined(&ATA_PIO4);
    eval 'sub ATA_PIO_MAX () {0xf;}' unless defined(&ATA_PIO_MAX);
    eval 'sub ATA_DMA () {0x10;}' unless defined(&ATA_DMA);
    eval 'sub ATA_WDMA0 () {0x20;}' unless defined(&ATA_WDMA0);
    eval 'sub ATA_WDMA1 () {0x21;}' unless defined(&ATA_WDMA1);
    eval 'sub ATA_WDMA2 () {0x22;}' unless defined(&ATA_WDMA2);
    eval 'sub ATA_UDMA0 () {0x40;}' unless defined(&ATA_UDMA0);
    eval 'sub ATA_UDMA1 () {0x41;}' unless defined(&ATA_UDMA1);
    eval 'sub ATA_UDMA2 () {0x42;}' unless defined(&ATA_UDMA2);
    eval 'sub ATA_UDMA3 () {0x43;}' unless defined(&ATA_UDMA3);
    eval 'sub ATA_UDMA4 () {0x44;}' unless defined(&ATA_UDMA4);
    eval 'sub ATA_UDMA5 () {0x45;}' unless defined(&ATA_UDMA5);
    eval 'sub ATA_UDMA6 () {0x46;}' unless defined(&ATA_UDMA6);
    eval 'sub ATA_SA150 () {0x47;}' unless defined(&ATA_SA150);
    eval 'sub ATA_SA300 () {0x48;}' unless defined(&ATA_SA300);
    eval 'sub ATA_SA600 () {0x49;}' unless defined(&ATA_SA600);
    eval 'sub ATA_DMA_MAX () {0x4f;}' unless defined(&ATA_DMA_MAX);
    eval 'sub ATA_NOP () {0x;}' unless defined(&ATA_NOP);
    eval 'sub ATA_NF_FLUSHQUEUE () {0x;}' unless defined(&ATA_NF_FLUSHQUEUE);
    eval 'sub ATA_NF_AUTOPOLL () {0x1;}' unless defined(&ATA_NF_AUTOPOLL);
    eval 'sub ATA_DATA_SET_MANAGEMENT () {0x6;}' unless defined(&ATA_DATA_SET_MANAGEMENT);
    eval 'sub ATA_DSM_TRIM () {0x1;}' unless defined(&ATA_DSM_TRIM);
    eval 'sub ATA_DEVICE_RESET () {0x8;}' unless defined(&ATA_DEVICE_RESET);
    eval 'sub ATA_READ () {0x20;}' unless defined(&ATA_READ);
    eval 'sub ATA_READ48 () {0x24;}' unless defined(&ATA_READ48);
    eval 'sub ATA_READ_DMA48 () {0x25;}' unless defined(&ATA_READ_DMA48);
    eval 'sub ATA_READ_DMA_QUEUED48 () {0x26;}' unless defined(&ATA_READ_DMA_QUEUED48);
    eval 'sub ATA_READ_NATIVE_MAX_ADDRESS48 () {0x27;}' unless defined(&ATA_READ_NATIVE_MAX_ADDRESS48);
    eval 'sub ATA_READ_MUL48 () {0x29;}' unless defined(&ATA_READ_MUL48);
    eval 'sub ATA_READ_STREAM_DMA48 () {0x2a;}' unless defined(&ATA_READ_STREAM_DMA48);
    eval 'sub ATA_READ_LOG_EXT () {0x2f;}' unless defined(&ATA_READ_LOG_EXT);
    eval 'sub ATA_READ_STREAM48 () {0x2b;}' unless defined(&ATA_READ_STREAM48);
    eval 'sub ATA_WRITE () {0x30;}' unless defined(&ATA_WRITE);
    eval 'sub ATA_WRITE48 () {0x34;}' unless defined(&ATA_WRITE48);
    eval 'sub ATA_WRITE_DMA48 () {0x35;}' unless defined(&ATA_WRITE_DMA48);
    eval 'sub ATA_WRITE_DMA_QUEUED48 () {0x36;}' unless defined(&ATA_WRITE_DMA_QUEUED48);
    eval 'sub ATA_SET_MAX_ADDRESS48 () {0x37;}' unless defined(&ATA_SET_MAX_ADDRESS48);
    eval 'sub ATA_WRITE_MUL48 () {0x39;}' unless defined(&ATA_WRITE_MUL48);
    eval 'sub ATA_WRITE_STREAM_DMA48 () {0x3a;}' unless defined(&ATA_WRITE_STREAM_DMA48);
    eval 'sub ATA_WRITE_STREAM48 () {0x3b;}' unless defined(&ATA_WRITE_STREAM48);
    eval 'sub ATA_WRITE_DMA_FUA48 () {0x3d;}' unless defined(&ATA_WRITE_DMA_FUA48);
    eval 'sub ATA_WRITE_DMA_QUEUED_FUA48 () {0x3e;}' unless defined(&ATA_WRITE_DMA_QUEUED_FUA48);
    eval 'sub ATA_WRITE_LOG_EXT () {0x3f;}' unless defined(&ATA_WRITE_LOG_EXT);
    eval 'sub ATA_READ_VERIFY () {0x40;}' unless defined(&ATA_READ_VERIFY);
    eval 'sub ATA_READ_VERIFY48 () {0x42;}' unless defined(&ATA_READ_VERIFY48);
    eval 'sub ATA_WRITE_UNCORRECTABLE48 () {0x45;}' unless defined(&ATA_WRITE_UNCORRECTABLE48);
    eval 'sub ATA_WU_PSEUDO () {0x55;}' unless defined(&ATA_WU_PSEUDO);
    eval 'sub ATA_WU_FLAGGED () {0xaa;}' unless defined(&ATA_WU_FLAGGED);
    eval 'sub ATA_READ_LOG_DMA_EXT () {0x47;}' unless defined(&ATA_READ_LOG_DMA_EXT);
    eval 'sub ATA_ZAC_MANAGEMENT_IN () {0x4a;}' unless defined(&ATA_ZAC_MANAGEMENT_IN);
    eval 'sub ATA_ZM_REPORT_ZONES () {0x;}' unless defined(&ATA_ZM_REPORT_ZONES);
    eval 'sub ATA_WRITE_LOG_DMA_EXT () {0x57;}' unless defined(&ATA_WRITE_LOG_DMA_EXT);
    eval 'sub ATA_TRUSTED_NON_DATA () {0x5b;}' unless defined(&ATA_TRUSTED_NON_DATA);
    eval 'sub ATA_TRUSTED_RECEIVE () {0x5c;}' unless defined(&ATA_TRUSTED_RECEIVE);
    eval 'sub ATA_TRUSTED_RECEIVE_DMA () {0x5d;}' unless defined(&ATA_TRUSTED_RECEIVE_DMA);
    eval 'sub ATA_TRUSTED_SEND () {0x5e;}' unless defined(&ATA_TRUSTED_SEND);
    eval 'sub ATA_TRUSTED_SEND_DMA () {0x5f;}' unless defined(&ATA_TRUSTED_SEND_DMA);
    eval 'sub ATA_READ_FPDMA_QUEUED () {0x60;}' unless defined(&ATA_READ_FPDMA_QUEUED);
    eval 'sub ATA_WRITE_FPDMA_QUEUED () {0x61;}' unless defined(&ATA_WRITE_FPDMA_QUEUED);
    eval 'sub ATA_NCQ_NON_DATA () {0x63;}' unless defined(&ATA_NCQ_NON_DATA);
    eval 'sub ATA_ABORT_NCQ_QUEUE () {0x;}' unless defined(&ATA_ABORT_NCQ_QUEUE);
    eval 'sub ATA_DEADLINE_HANDLING () {0x1;}' unless defined(&ATA_DEADLINE_HANDLING);
    eval 'sub ATA_SET_FEATURES () {0x5;}' unless defined(&ATA_SET_FEATURES);
    eval 'sub ATA_ZERO_EXT () {0x6;}' unless defined(&ATA_ZERO_EXT);
    eval 'sub ATA_NCQ_ZAC_MGMT_OUT () {0x7;}' unless defined(&ATA_NCQ_ZAC_MGMT_OUT);
    eval 'sub ATA_SEND_FPDMA_QUEUED () {0x64;}' unless defined(&ATA_SEND_FPDMA_QUEUED);
    eval 'sub ATA_SFPDMA_DSM () {0x;}' unless defined(&ATA_SFPDMA_DSM);
    eval 'sub ATA_SFPDMA_DSM_TRIM () {0x1;}' unless defined(&ATA_SFPDMA_DSM_TRIM);
    eval 'sub ATA_SFPDMA_HYBRID_EVICT () {0x1;}' unless defined(&ATA_SFPDMA_HYBRID_EVICT);
    eval 'sub ATA_SFPDMA_WLDMA () {0x2;}' unless defined(&ATA_SFPDMA_WLDMA);
    eval 'sub ATA_SFPDMA_ZAC_MGMT_OUT () {0x3;}' unless defined(&ATA_SFPDMA_ZAC_MGMT_OUT);
    eval 'sub ATA_RECV_FPDMA_QUEUED () {0x65;}' unless defined(&ATA_RECV_FPDMA_QUEUED);
    eval 'sub ATA_RFPDMA_RL_DMA_EXT () {0x;}' unless defined(&ATA_RFPDMA_RL_DMA_EXT);
    eval 'sub ATA_RFPDMA_ZAC_MGMT_IN () {0x2;}' unless defined(&ATA_RFPDMA_ZAC_MGMT_IN);
    eval 'sub ATA_SEP_ATTN () {0x67;}' unless defined(&ATA_SEP_ATTN);
    eval 'sub ATA_SEEK () {0x70;}' unless defined(&ATA_SEEK);
    eval 'sub ATA_AMAX_ADDR () {0x78;}' unless defined(&ATA_AMAX_ADDR);
    eval 'sub ATA_AMAX_ADDR_GET () {0x;}' unless defined(&ATA_AMAX_ADDR_GET);
    eval 'sub ATA_AMAX_ADDR_SET () {0x1;}' unless defined(&ATA_AMAX_ADDR_SET);
    eval 'sub ATA_AMAX_ADDR_FREEZE () {0x2;}' unless defined(&ATA_AMAX_ADDR_FREEZE);
    eval 'sub ATA_ZAC_MANAGEMENT_OUT () {0x9f;}' unless defined(&ATA_ZAC_MANAGEMENT_OUT);
    eval 'sub ATA_ZM_CLOSE_ZONE () {0x1;}' unless defined(&ATA_ZM_CLOSE_ZONE);
    eval 'sub ATA_ZM_FINISH_ZONE () {0x2;}' unless defined(&ATA_ZM_FINISH_ZONE);
    eval 'sub ATA_ZM_OPEN_ZONE () {0x3;}' unless defined(&ATA_ZM_OPEN_ZONE);
    eval 'sub ATA_ZM_RWP () {0x4;}' unless defined(&ATA_ZM_RWP);
    eval 'sub ATA_DOWNLOAD_MICROCODE () {0x92;}' unless defined(&ATA_DOWNLOAD_MICROCODE);
    eval 'sub ATA_DOWNLOAD_MICROCODE_DMA () {0x93;}' unless defined(&ATA_DOWNLOAD_MICROCODE_DMA);
    eval 'sub ATA_PACKET_CMD () {0xa0;}' unless defined(&ATA_PACKET_CMD);
    eval 'sub ATA_ATAPI_IDENTIFY () {0xa1;}' unless defined(&ATA_ATAPI_IDENTIFY);
    eval 'sub ATA_SERVICE () {0xa2;}' unless defined(&ATA_SERVICE);
    eval 'sub ATA_SMART_CMD () {0xb0;}' unless defined(&ATA_SMART_CMD);
    eval 'sub ATA_SANITIZE () {0xb4;}' unless defined(&ATA_SANITIZE);
    eval 'sub ATA_CFA_ERASE () {0xc0;}' unless defined(&ATA_CFA_ERASE);
    eval 'sub ATA_READ_MUL () {0xc4;}' unless defined(&ATA_READ_MUL);
    eval 'sub ATA_WRITE_MUL () {0xc5;}' unless defined(&ATA_WRITE_MUL);
    eval 'sub ATA_SET_MULTI () {0xc6;}' unless defined(&ATA_SET_MULTI);
    eval 'sub ATA_READ_DMA_QUEUED () {0xc7;}' unless defined(&ATA_READ_DMA_QUEUED);
    eval 'sub ATA_READ_DMA () {0xc8;}' unless defined(&ATA_READ_DMA);
    eval 'sub ATA_WRITE_DMA () {0xca;}' unless defined(&ATA_WRITE_DMA);
    eval 'sub ATA_WRITE_DMA_QUEUED () {0xcc;}' unless defined(&ATA_WRITE_DMA_QUEUED);
    eval 'sub ATA_WRITE_MUL_FUA48 () {0xce;}' unless defined(&ATA_WRITE_MUL_FUA48);
    eval 'sub ATA_STANDBY_IMMEDIATE () {0xe0;}' unless defined(&ATA_STANDBY_IMMEDIATE);
    eval 'sub ATA_IDLE_IMMEDIATE () {0xe1;}' unless defined(&ATA_IDLE_IMMEDIATE);
    eval 'sub ATA_STANDBY_CMD () {0xe2;}' unless defined(&ATA_STANDBY_CMD);
    eval 'sub ATA_IDLE_CMD () {0xe3;}' unless defined(&ATA_IDLE_CMD);
    eval 'sub ATA_READ_BUFFER () {0xe4;}' unless defined(&ATA_READ_BUFFER);
    eval 'sub ATA_READ_PM () {0xe4;}' unless defined(&ATA_READ_PM);
    eval 'sub ATA_CHECK_POWER_MODE () {0xe5;}' unless defined(&ATA_CHECK_POWER_MODE);
    eval 'sub ATA_PM_STANDBY () {0x;}' unless defined(&ATA_PM_STANDBY);
    eval 'sub ATA_PM_STANDBY_Y () {0x1;}' unless defined(&ATA_PM_STANDBY_Y);
    eval 'sub ATA_PM_IDLE () {0x80;}' unless defined(&ATA_PM_IDLE);
    eval 'sub ATA_PM_IDLE_A () {0x81;}' unless defined(&ATA_PM_IDLE_A);
    eval 'sub ATA_PM_IDLE_B () {0x82;}' unless defined(&ATA_PM_IDLE_B);
    eval 'sub ATA_PM_IDLE_C () {0x83;}' unless defined(&ATA_PM_IDLE_C);
    eval 'sub ATA_PM_ACTIVE_IDLE () {0xff;}' unless defined(&ATA_PM_ACTIVE_IDLE);
    eval 'sub ATA_SLEEP () {0xe6;}' unless defined(&ATA_SLEEP);
    eval 'sub ATA_FLUSHCACHE () {0xe7;}' unless defined(&ATA_FLUSHCACHE);
    eval 'sub ATA_WRITE_BUFFER () {0xe8;}' unless defined(&ATA_WRITE_BUFFER);
    eval 'sub ATA_WRITE_PM () {0xe8;}' unless defined(&ATA_WRITE_PM);
    eval 'sub ATA_READ_BUFFER_DMA () {0xe9;}' unless defined(&ATA_READ_BUFFER_DMA);
    eval 'sub ATA_FLUSHCACHE48 () {0xea;}' unless defined(&ATA_FLUSHCACHE48);
    eval 'sub ATA_WRITE_BUFFER_DMA () {0xeb;}' unless defined(&ATA_WRITE_BUFFER_DMA);
    eval 'sub ATA_ATA_IDENTIFY () {0xec;}' unless defined(&ATA_ATA_IDENTIFY);
    eval 'sub ATA_SETFEATURES () {0xef;}' unless defined(&ATA_SETFEATURES);
    eval 'sub ATA_SF_ENAB_WCACHE () {0x2;}' unless defined(&ATA_SF_ENAB_WCACHE);
    eval 'sub ATA_SF_DIS_WCACHE () {0x82;}' unless defined(&ATA_SF_DIS_WCACHE);
    eval 'sub ATA_SF_SETXFER () {0x3;}' unless defined(&ATA_SF_SETXFER);
    eval 'sub ATA_SF_APM () {0x5;}' unless defined(&ATA_SF_APM);
    eval 'sub ATA_SF_ENAB_PUIS () {0x6;}' unless defined(&ATA_SF_ENAB_PUIS);
    eval 'sub ATA_SF_DIS_PUIS () {0x86;}' unless defined(&ATA_SF_DIS_PUIS);
    eval 'sub ATA_SF_PUIS_SPINUP () {0x7;}' unless defined(&ATA_SF_PUIS_SPINUP);
    eval 'sub ATA_SF_WRV () {0xb;}' unless defined(&ATA_SF_WRV);
    eval 'sub ATA_SF_DLC () {0xc;}' unless defined(&ATA_SF_DLC);
    eval 'sub ATA_SF_SATA () {0x10;}' unless defined(&ATA_SF_SATA);
    eval 'sub ATA_SF_FFC () {0x41;}' unless defined(&ATA_SF_FFC);
    eval 'sub ATA_SF_MHIST () {0x43;}' unless defined(&ATA_SF_MHIST);
    eval 'sub ATA_SF_RATE () {0x45;}' unless defined(&ATA_SF_RATE);
    eval 'sub ATA_SF_EPC () {0x4a;}' unless defined(&ATA_SF_EPC);
    eval 'sub ATA_SF_ENAB_RCACHE () {0xaa;}' unless defined(&ATA_SF_ENAB_RCACHE);
    eval 'sub ATA_SF_DIS_RCACHE () {0x55;}' unless defined(&ATA_SF_DIS_RCACHE);
    eval 'sub ATA_SF_ENAB_RELIRQ () {0x5d;}' unless defined(&ATA_SF_ENAB_RELIRQ);
    eval 'sub ATA_SF_DIS_RELIRQ () {0xdd;}' unless defined(&ATA_SF_DIS_RELIRQ);
    eval 'sub ATA_SF_ENAB_SRVIRQ () {0x5e;}' unless defined(&ATA_SF_ENAB_SRVIRQ);
    eval 'sub ATA_SF_DIS_SRVIRQ () {0xde;}' unless defined(&ATA_SF_DIS_SRVIRQ);
    eval 'sub ATA_SF_LPSAERC () {0x62;}' unless defined(&ATA_SF_LPSAERC);
    eval 'sub ATA_SF_DSN () {0x63;}' unless defined(&ATA_SF_DSN);
    eval 'sub ATA_SECURITY_SET_PASSWORD () {0xf1;}' unless defined(&ATA_SECURITY_SET_PASSWORD);
    eval 'sub ATA_SECURITY_UNLOCK () {0xf2;}' unless defined(&ATA_SECURITY_UNLOCK);
    eval 'sub ATA_SECURITY_ERASE_PREPARE () {0xf3;}' unless defined(&ATA_SECURITY_ERASE_PREPARE);
    eval 'sub ATA_SECURITY_ERASE_UNIT () {0xf4;}' unless defined(&ATA_SECURITY_ERASE_UNIT);
    eval 'sub ATA_SECURITY_FREEZE_LOCK () {0xf5;}' unless defined(&ATA_SECURITY_FREEZE_LOCK);
    eval 'sub ATA_SECURITY_DISABLE_PASSWORD () {0xf6;}' unless defined(&ATA_SECURITY_DISABLE_PASSWORD);
    eval 'sub ATA_READ_NATIVE_MAX_ADDRESS () {0xf8;}' unless defined(&ATA_READ_NATIVE_MAX_ADDRESS);
    eval 'sub ATA_SET_MAX_ADDRESS () {0xf9;}' unless defined(&ATA_SET_MAX_ADDRESS);
    eval 'sub ATAPI_TEST_UNIT_READY () {0x;}' unless defined(&ATAPI_TEST_UNIT_READY);
    eval 'sub ATAPI_REZERO () {0x1;}' unless defined(&ATAPI_REZERO);
    eval 'sub ATAPI_REQUEST_SENSE () {0x3;}' unless defined(&ATAPI_REQUEST_SENSE);
    eval 'sub ATAPI_FORMAT () {0x4;}' unless defined(&ATAPI_FORMAT);
    eval 'sub ATAPI_READ () {0x8;}' unless defined(&ATAPI_READ);
    eval 'sub ATAPI_WRITE () {0xa;}' unless defined(&ATAPI_WRITE);
    eval 'sub ATAPI_WEOF () {0x10;}' unless defined(&ATAPI_WEOF);
    eval 'sub ATAPI_WF_WRITE () {0x1;}' unless defined(&ATAPI_WF_WRITE);
    eval 'sub ATAPI_SPACE () {0x11;}' unless defined(&ATAPI_SPACE);
    eval 'sub ATAPI_SP_FM () {0x1;}' unless defined(&ATAPI_SP_FM);
    eval 'sub ATAPI_SP_EOD () {0x3;}' unless defined(&ATAPI_SP_EOD);
    eval 'sub ATAPI_INQUIRY () {0x12;}' unless defined(&ATAPI_INQUIRY);
    eval 'sub ATAPI_MODE_SELECT () {0x15;}' unless defined(&ATAPI_MODE_SELECT);
    eval 'sub ATAPI_ERASE () {0x19;}' unless defined(&ATAPI_ERASE);
    eval 'sub ATAPI_MODE_SENSE () {0x1a;}' unless defined(&ATAPI_MODE_SENSE);
    eval 'sub ATAPI_START_STOP () {0x1b;}' unless defined(&ATAPI_START_STOP);
    eval 'sub ATAPI_SS_LOAD () {0x1;}' unless defined(&ATAPI_SS_LOAD);
    eval 'sub ATAPI_SS_RETENSION () {0x2;}' unless defined(&ATAPI_SS_RETENSION);
    eval 'sub ATAPI_SS_EJECT () {0x4;}' unless defined(&ATAPI_SS_EJECT);
    eval 'sub ATAPI_PREVENT_ALLOW () {0x1e;}' unless defined(&ATAPI_PREVENT_ALLOW);
    eval 'sub ATAPI_READ_FORMAT_CAPACITIES () {0x23;}' unless defined(&ATAPI_READ_FORMAT_CAPACITIES);
    eval 'sub ATAPI_READ_CAPACITY () {0x25;}' unless defined(&ATAPI_READ_CAPACITY);
    eval 'sub ATAPI_READ_BIG () {0x28;}' unless defined(&ATAPI_READ_BIG);
    eval 'sub ATAPI_WRITE_BIG () {0x2a;}' unless defined(&ATAPI_WRITE_BIG);
    eval 'sub ATAPI_LOCATE () {0x2b;}' unless defined(&ATAPI_LOCATE);
    eval 'sub ATAPI_READ_POSITION () {0x34;}' unless defined(&ATAPI_READ_POSITION);
    eval 'sub ATAPI_SYNCHRONIZE_CACHE () {0x35;}' unless defined(&ATAPI_SYNCHRONIZE_CACHE);
    eval 'sub ATAPI_WRITE_BUFFER () {0x3b;}' unless defined(&ATAPI_WRITE_BUFFER);
    eval 'sub ATAPI_READ_BUFFER () {0x3c;}' unless defined(&ATAPI_READ_BUFFER);
    eval 'sub ATAPI_READ_SUBCHANNEL () {0x42;}' unless defined(&ATAPI_READ_SUBCHANNEL);
    eval 'sub ATAPI_READ_TOC () {0x43;}' unless defined(&ATAPI_READ_TOC);
    eval 'sub ATAPI_PLAY_10 () {0x45;}' unless defined(&ATAPI_PLAY_10);
    eval 'sub ATAPI_PLAY_MSF () {0x47;}' unless defined(&ATAPI_PLAY_MSF);
    eval 'sub ATAPI_PLAY_TRACK () {0x48;}' unless defined(&ATAPI_PLAY_TRACK);
    eval 'sub ATAPI_PAUSE () {0x4b;}' unless defined(&ATAPI_PAUSE);
    eval 'sub ATAPI_READ_DISK_INFO () {0x51;}' unless defined(&ATAPI_READ_DISK_INFO);
    eval 'sub ATAPI_READ_TRACK_INFO () {0x52;}' unless defined(&ATAPI_READ_TRACK_INFO);
    eval 'sub ATAPI_RESERVE_TRACK () {0x53;}' unless defined(&ATAPI_RESERVE_TRACK);
    eval 'sub ATAPI_SEND_OPC_INFO () {0x54;}' unless defined(&ATAPI_SEND_OPC_INFO);
    eval 'sub ATAPI_MODE_SELECT_BIG () {0x55;}' unless defined(&ATAPI_MODE_SELECT_BIG);
    eval 'sub ATAPI_REPAIR_TRACK () {0x58;}' unless defined(&ATAPI_REPAIR_TRACK);
    eval 'sub ATAPI_READ_MASTER_CUE () {0x59;}' unless defined(&ATAPI_READ_MASTER_CUE);
    eval 'sub ATAPI_MODE_SENSE_BIG () {0x5a;}' unless defined(&ATAPI_MODE_SENSE_BIG);
    eval 'sub ATAPI_CLOSE_TRACK () {0x5b;}' unless defined(&ATAPI_CLOSE_TRACK);
    eval 'sub ATAPI_READ_BUFFER_CAPACITY () {0x5c;}' unless defined(&ATAPI_READ_BUFFER_CAPACITY);
    eval 'sub ATAPI_SEND_CUE_SHEET () {0x5d;}' unless defined(&ATAPI_SEND_CUE_SHEET);
    eval 'sub ATAPI_SERVICE_ACTION_IN () {0x96;}' unless defined(&ATAPI_SERVICE_ACTION_IN);
    eval 'sub ATAPI_BLANK () {0xa1;}' unless defined(&ATAPI_BLANK);
    eval 'sub ATAPI_SEND_KEY () {0xa3;}' unless defined(&ATAPI_SEND_KEY);
    eval 'sub ATAPI_REPORT_KEY () {0xa4;}' unless defined(&ATAPI_REPORT_KEY);
    eval 'sub ATAPI_PLAY_12 () {0xa5;}' unless defined(&ATAPI_PLAY_12);
    eval 'sub ATAPI_LOAD_UNLOAD () {0xa6;}' unless defined(&ATAPI_LOAD_UNLOAD);
    eval 'sub ATAPI_READ_STRUCTURE () {0xad;}' unless defined(&ATAPI_READ_STRUCTURE);
    eval 'sub ATAPI_PLAY_CD () {0xb4;}' unless defined(&ATAPI_PLAY_CD);
    eval 'sub ATAPI_SET_SPEED () {0xbb;}' unless defined(&ATAPI_SET_SPEED);
    eval 'sub ATAPI_MECH_STATUS () {0xbd;}' unless defined(&ATAPI_MECH_STATUS);
    eval 'sub ATAPI_READ_CD () {0xbe;}' unless defined(&ATAPI_READ_CD);
    eval 'sub ATAPI_POLL_DSC () {0xff;}' unless defined(&ATAPI_POLL_DSC);
    eval 'sub IOCATAGMAXCHANNEL () { &_IOR(ord(\'a\'), 1, \'int\');}' unless defined(&IOCATAGMAXCHANNEL);
    eval 'sub IOCATAREINIT () { &_IOW(ord(\'a\'), 2, \'int\');}' unless defined(&IOCATAREINIT);
    eval 'sub IOCATAATTACH () { &_IOW(ord(\'a\'), 3, \'int\');}' unless defined(&IOCATAATTACH);
    eval 'sub IOCATADETACH () { &_IOW(ord(\'a\'), 4, \'int\');}' unless defined(&IOCATADETACH);
    eval 'sub IOCATADEVICES () { &_IOWR(ord(\'a\'), 5, \'struct ata_ioc_devices\');}' unless defined(&IOCATADEVICES);
    eval 'sub ATA_SENSE_VALID () {0x80;}' unless defined(&ATA_SENSE_VALID);
    eval 'sub ATA_SENSE_KEY_MASK () {0xf;}' unless defined(&ATA_SENSE_KEY_MASK);
    eval 'sub ATA_SENSE_NO_SENSE () {0x;}' unless defined(&ATA_SENSE_NO_SENSE);
    eval 'sub ATA_SENSE_RECOVERED_ERROR () {0x1;}' unless defined(&ATA_SENSE_RECOVERED_ERROR);
    eval 'sub ATA_SENSE_NOT_READY () {0x2;}' unless defined(&ATA_SENSE_NOT_READY);
    eval 'sub ATA_SENSE_MEDIUM_ERROR () {0x3;}' unless defined(&ATA_SENSE_MEDIUM_ERROR);
    eval 'sub ATA_SENSE_HARDWARE_ERROR () {0x4;}' unless defined(&ATA_SENSE_HARDWARE_ERROR);
    eval 'sub ATA_SENSE_ILLEGAL_REQUEST () {0x5;}' unless defined(&ATA_SENSE_ILLEGAL_REQUEST);
    eval 'sub ATA_SENSE_UNIT_ATTENTION () {0x6;}' unless defined(&ATA_SENSE_UNIT_ATTENTION);
    eval 'sub ATA_SENSE_DATA_PROTECT () {0x7;}' unless defined(&ATA_SENSE_DATA_PROTECT);
    eval 'sub ATA_SENSE_BLANK_CHECK () {0x8;}' unless defined(&ATA_SENSE_BLANK_CHECK);
    eval 'sub ATA_SENSE_VENDOR_SPECIFIC () {0x9;}' unless defined(&ATA_SENSE_VENDOR_SPECIFIC);
    eval 'sub ATA_SENSE_COPY_ABORTED () {0xa;}' unless defined(&ATA_SENSE_COPY_ABORTED);
    eval 'sub ATA_SENSE_ABORTED_COMMAND () {0xb;}' unless defined(&ATA_SENSE_ABORTED_COMMAND);
    eval 'sub ATA_SENSE_EQUAL () {0xc;}' unless defined(&ATA_SENSE_EQUAL);
    eval 'sub ATA_SENSE_VOLUME_OVERFLOW () {0xd;}' unless defined(&ATA_SENSE_VOLUME_OVERFLOW);
    eval 'sub ATA_SENSE_MISCOMPARE () {0xe;}' unless defined(&ATA_SENSE_MISCOMPARE);
    eval 'sub ATA_SENSE_RESERVED () {0xf;}' unless defined(&ATA_SENSE_RESERVED);
    eval 'sub ATA_SENSE_ILI () {0x20;;}' unless defined(&ATA_SENSE_ILI);
    eval 'sub ATA_SENSE_EOM () {0x40;;}' unless defined(&ATA_SENSE_EOM);
    eval 'sub ATA_SENSE_FILEMARK () {0x80;;}' unless defined(&ATA_SENSE_FILEMARK);
    eval 'sub ATA_SENSE_SPEC_VALID () {0x80;}' unless defined(&ATA_SENSE_SPEC_VALID);
    eval 'sub ATA_SENSE_SPEC_MASK () {0x7f;}' unless defined(&ATA_SENSE_SPEC_MASK);
    eval 'sub ATA_SF_EPC_RESTORE () {0x;}' unless defined(&ATA_SF_EPC_RESTORE);
    eval 'sub ATA_SF_EPC_GOTO () {0x1;}' unless defined(&ATA_SF_EPC_GOTO);
    eval 'sub ATA_SF_EPC_SET_TIMER () {0x2;}' unless defined(&ATA_SF_EPC_SET_TIMER);
    eval 'sub ATA_SF_EPC_SET_STATE () {0x3;}' unless defined(&ATA_SF_EPC_SET_STATE);
    eval 'sub ATA_SF_EPC_ENABLE () {0x4;}' unless defined(&ATA_SF_EPC_ENABLE);
    eval 'sub ATA_SF_EPC_DISABLE () {0x5;}' unless defined(&ATA_SF_EPC_DISABLE);
    eval 'sub ATA_SF_EPC_SET_SOURCE () {0x6;}' unless defined(&ATA_SF_EPC_SET_SOURCE);
    eval 'sub ATA_EPC_STANDBY_Z () {0x;}' unless defined(&ATA_EPC_STANDBY_Z);
    eval 'sub ATA_EPC_STANDBY_Y () {0x1;}' unless defined(&ATA_EPC_STANDBY_Y);
    eval 'sub ATA_EPC_IDLE_A () {0x81;}' unless defined(&ATA_EPC_IDLE_A);
    eval 'sub ATA_EPC_IDLE_B () {0x82;}' unless defined(&ATA_EPC_IDLE_B);
    eval 'sub ATA_EPC_IDLE_C () {0x83;}' unless defined(&ATA_EPC_IDLE_C);
    eval 'sub ATA_EPC_ALL () {0xff;}' unless defined(&ATA_EPC_ALL);
    eval 'sub ATA_SF_EPC_RST_DFLT () {0x40;}' unless defined(&ATA_SF_EPC_RST_DFLT);
    eval 'sub ATA_SF_EPC_RST_SAVE () {0x10;}' unless defined(&ATA_SF_EPC_RST_SAVE);
    eval 'sub ATA_SF_EPC_GOTO_DELAY () {0x2000000;}' unless defined(&ATA_SF_EPC_GOTO_DELAY);
    eval 'sub ATA_SF_EPC_GOTO_HOLD () {0x1000000;}' unless defined(&ATA_SF_EPC_GOTO_HOLD);
    eval 'sub ATA_SF_EPC_TIMER_MASK () {0xffff00;}' unless defined(&ATA_SF_EPC_TIMER_MASK);
    eval 'sub ATA_SF_EPC_TIMER_SHIFT () {8;}' unless defined(&ATA_SF_EPC_TIMER_SHIFT);
    eval 'sub ATA_SF_EPC_TIMER_SEC () {0x80;}' unless defined(&ATA_SF_EPC_TIMER_SEC);
    eval 'sub ATA_SF_EPC_TIMER_EN () {0x20;}' unless defined(&ATA_SF_EPC_TIMER_EN);
    eval 'sub ATA_SF_EPC_TIMER_SAVE () {0x10;}' unless defined(&ATA_SF_EPC_TIMER_SAVE);
    eval 'sub ATA_SF_EPC_SETCON_EN () {0x20;}' unless defined(&ATA_SF_EPC_SETCON_EN);
    eval 'sub ATA_SF_EPC_SETCON_SAVE () {0x10;}' unless defined(&ATA_SF_EPC_SETCON_SAVE);
    eval 'sub ATA_SF_EPC_SRC_UNKNOWN () {0x;}' unless defined(&ATA_SF_EPC_SRC_UNKNOWN);
    eval 'sub ATA_SF_EPC_SRC_BAT () {0x1;}' unless defined(&ATA_SF_EPC_SRC_BAT);
    eval 'sub ATA_SF_EPC_SRC_NOT_BAT () {0x2;}' unless defined(&ATA_SF_EPC_SRC_NOT_BAT);
    eval 'sub ATA_LOG_DIRECTORY () {0x;}' unless defined(&ATA_LOG_DIRECTORY);
    eval 'sub ATA_POWER_COND_LOG () {0x8;}' unless defined(&ATA_POWER_COND_LOG);
    eval 'sub ATA_PCL_IDLE () {0x;}' unless defined(&ATA_PCL_IDLE);
    eval 'sub ATA_PCL_STANDBY () {0x1;}' unless defined(&ATA_PCL_STANDBY);
    eval 'sub ATA_IDENTIFY_DATA_LOG () {0x30;}' unless defined(&ATA_IDENTIFY_DATA_LOG);
    eval 'sub ATA_IDL_PAGE_LIST () {0x;}' unless defined(&ATA_IDL_PAGE_LIST);
    eval 'sub ATA_IDL_IDENTIFY_DATA () {0x1;}' unless defined(&ATA_IDL_IDENTIFY_DATA);
    eval 'sub ATA_IDL_CAPACITY () {0x2;}' unless defined(&ATA_IDL_CAPACITY);
    eval 'sub ATA_IDL_SUP_CAP () {0x3;}' unless defined(&ATA_IDL_SUP_CAP);
    eval 'sub ATA_IDL_CUR_SETTINGS () {0x4;}' unless defined(&ATA_IDL_CUR_SETTINGS);
    eval 'sub ATA_IDL_ATA_STRINGS () {0x5;}' unless defined(&ATA_IDL_ATA_STRINGS);
    eval 'sub ATA_IDL_SECURITY () {0x6;}' unless defined(&ATA_IDL_SECURITY);
    eval 'sub ATA_IDL_PARALLEL_ATA () {0x7;}' unless defined(&ATA_IDL_PARALLEL_ATA);
    eval 'sub ATA_IDL_SERIAL_ATA () {0x8;}' unless defined(&ATA_IDL_SERIAL_ATA);
    eval 'sub ATA_IDL_ZDI () {0x9;}' unless defined(&ATA_IDL_ZDI);
    eval 'sub ATA_GP_LOG_DIR_VERSION () {0x1;}' unless defined(&ATA_GP_LOG_DIR_VERSION);
    eval 'sub ATA_PCL_COND_SUPPORTED () {0x80;}' unless defined(&ATA_PCL_COND_SUPPORTED);
    eval 'sub ATA_PCL_COND_SAVEABLE () {0x40;}' unless defined(&ATA_PCL_COND_SAVEABLE);
    eval 'sub ATA_PCL_COND_CHANGEABLE () {0x20;}' unless defined(&ATA_PCL_COND_CHANGEABLE);
    eval 'sub ATA_PCL_DEFAULT_TIMER_EN () {0x10;}' unless defined(&ATA_PCL_DEFAULT_TIMER_EN);
    eval 'sub ATA_PCL_SAVED_TIMER_EN () {0x8;}' unless defined(&ATA_PCL_SAVED_TIMER_EN);
    eval 'sub ATA_PCL_CURRENT_TIMER_EN () {0x4;}' unless defined(&ATA_PCL_CURRENT_TIMER_EN);
    eval 'sub ATA_PCL_HOLD_PC_NOT_SUP () {0x2;}' unless defined(&ATA_PCL_HOLD_PC_NOT_SUP);
    eval 'sub ATA_IDLOG_REVISION () {0x1;}' unless defined(&ATA_IDLOG_REVISION);
    eval 'sub ATA_CAP_HEADER_VALID () {0x8000000000000000;}' unless defined(&ATA_CAP_HEADER_VALID);
    eval 'sub ATA_CAP_PAGE_NUM_MASK () {0xff0000;}' unless defined(&ATA_CAP_PAGE_NUM_MASK);
    eval 'sub ATA_CAP_PAGE_NUM_SHIFT () {16;}' unless defined(&ATA_CAP_PAGE_NUM_SHIFT);
    eval 'sub ATA_CAP_REV_MASK () {0xff;}' unless defined(&ATA_CAP_REV_MASK);
    eval 'sub ATA_CAP_CAPACITY_VALID () {0x8000000000000000;}' unless defined(&ATA_CAP_CAPACITY_VALID);
    eval 'sub ATA_CAP_ACCESSIBLE_CAP () {0xffffffffffff;}' unless defined(&ATA_CAP_ACCESSIBLE_CAP);
    eval 'sub ATA_CAP_PL_VALID () {0x8000000000000000;}' unless defined(&ATA_CAP_PL_VALID);
    eval 'sub ATA_CAP_LTOP_REL_SUP () {0x4000000000000000;}' unless defined(&ATA_CAP_LTOP_REL_SUP);
    eval 'sub ATA_CAP_LOG_SECT_SUP () {0x2000000000000000;}' unless defined(&ATA_CAP_LOG_SECT_SUP);
    eval 'sub ATA_CAP_ALIGN_ERR_MASK () {0x300000;}' unless defined(&ATA_CAP_ALIGN_ERR_MASK);
    eval 'sub ATA_CAP_LTOP_MASK () {0xf0000;}' unless defined(&ATA_CAP_LTOP_MASK);
    eval 'sub ATA_CAP_LOG_SECT_OFF () {0xffff;}' unless defined(&ATA_CAP_LOG_SECT_OFF);
    eval 'sub ATA_CAP_LOG_SECT_VALID () {0x8000000000000000;}' unless defined(&ATA_CAP_LOG_SECT_VALID);
    eval 'sub ATA_CAP_LOG_SECT_SIZE () {0xffffffff;}' unless defined(&ATA_CAP_LOG_SECT_SIZE);
    eval 'sub ATA_CAP_NOM_BUF_VALID () {0x8000000000000000;}' unless defined(&ATA_CAP_NOM_BUF_VALID);
    eval 'sub ATA_CAP_NOM_BUF_SIZE () {0x7fffffffffffffff;}' unless defined(&ATA_CAP_NOM_BUF_SIZE);
    eval 'sub ATA_SUP_CAP_HEADER_VALID () {0x8000000000000000;}' unless defined(&ATA_SUP_CAP_HEADER_VALID);
    eval 'sub ATA_SUP_CAP_PAGE_NUM_MASK () {0xff0000;}' unless defined(&ATA_SUP_CAP_PAGE_NUM_MASK);
    eval 'sub ATA_SUP_CAP_PAGE_NUM_SHIFT () {16;}' unless defined(&ATA_SUP_CAP_PAGE_NUM_SHIFT);
    eval 'sub ATA_SUP_CAP_REV_MASK () {0xff;}' unless defined(&ATA_SUP_CAP_REV_MASK);
    eval 'sub ATA_SUP_CAP_VALID () {0x8000000000000000;}' unless defined(&ATA_SUP_CAP_VALID);
    eval 'sub ATA_SC_SET_SECT_CONFIG_SUP () {0x2000000000000;}' unless defined(&ATA_SC_SET_SECT_CONFIG_SUP);
    eval 'sub ATA_SC_ZERO_EXT_SUP () {0x1000000000000;}' unless defined(&ATA_SC_ZERO_EXT_SUP);
    eval 'sub ATA_SC_SUCC_NCQ_SENSE_SUP () {0x800000000000;}' unless defined(&ATA_SC_SUCC_NCQ_SENSE_SUP);
    eval 'sub ATA_SC_DLC_SUP () {0x400000000000;}' unless defined(&ATA_SC_DLC_SUP);
    eval 'sub ATA_SC_RQSN_DEV_FAULT_SUP () {0x200000000000;}' unless defined(&ATA_SC_RQSN_DEV_FAULT_SUP);
    eval 'sub ATA_SC_DSN_SUP () {0x100000000000;}' unless defined(&ATA_SC_DSN_SUP);
    eval 'sub ATA_SC_LP_STANDBY_SUP () {0x80000000000;}' unless defined(&ATA_SC_LP_STANDBY_SUP);
    eval 'sub ATA_SC_SET_EPC_PS_SUP () {0x40000000000;}' unless defined(&ATA_SC_SET_EPC_PS_SUP);
    eval 'sub ATA_SC_AMAX_ADDR_SUP () {0x20000000000;}' unless defined(&ATA_SC_AMAX_ADDR_SUP);
    eval 'sub ATA_SC_DRAT_SUP () {0x8000000000;}' unless defined(&ATA_SC_DRAT_SUP);
    eval 'sub ATA_SC_LPS_MISALGN_SUP () {0x4000000000;}' unless defined(&ATA_SC_LPS_MISALGN_SUP);
    eval 'sub ATA_SC_RB_DMA_SUP () {0x1000000000;}' unless defined(&ATA_SC_RB_DMA_SUP);
    eval 'sub ATA_SC_WB_DMA_SUP () {0x800000000;}' unless defined(&ATA_SC_WB_DMA_SUP);
    eval 'sub ATA_SC_DNLD_MC_DMA_SUP () {0x200000000;}' unless defined(&ATA_SC_DNLD_MC_DMA_SUP);
    eval 'sub ATA_SC_28BIT_SUP () {0x100000000;}' unless defined(&ATA_SC_28BIT_SUP);
    eval 'sub ATA_SC_RZAT_SUP () {0x80000000;}' unless defined(&ATA_SC_RZAT_SUP);
    eval 'sub ATA_SC_NOP_SUP () {0x20000000;}' unless defined(&ATA_SC_NOP_SUP);
    eval 'sub ATA_SC_READ_BUFFER_SUP () {0x10000000;}' unless defined(&ATA_SC_READ_BUFFER_SUP);
    eval 'sub ATA_SC_WRITE_BUFFER_SUP () {0x8000000;}' unless defined(&ATA_SC_WRITE_BUFFER_SUP);
    eval 'sub ATA_SC_READ_LOOK_AHEAD_SUP () {0x2000000;}' unless defined(&ATA_SC_READ_LOOK_AHEAD_SUP);
    eval 'sub ATA_SC_VOLATILE_WC_SUP () {0x1000000;}' unless defined(&ATA_SC_VOLATILE_WC_SUP);
    eval 'sub ATA_SC_SMART_SUP () {0x800000;}' unless defined(&ATA_SC_SMART_SUP);
    eval 'sub ATA_SC_FLUSH_CACHE_EXT_SUP () {0x400000;}' unless defined(&ATA_SC_FLUSH_CACHE_EXT_SUP);
    eval 'sub ATA_SC_48BIT_SUP () {0x100000;}' unless defined(&ATA_SC_48BIT_SUP);
    eval 'sub ATA_SC_SPINUP_SUP () {0x40000;}' unless defined(&ATA_SC_SPINUP_SUP);
    eval 'sub ATA_SC_PUIS_SUP () {0x20000;}' unless defined(&ATA_SC_PUIS_SUP);
    eval 'sub ATA_SC_APM_SUP () {0x10000;}' unless defined(&ATA_SC_APM_SUP);
    eval 'sub ATA_SC_DL_MICROCODE_SUP () {0x4000;}' unless defined(&ATA_SC_DL_MICROCODE_SUP);
    eval 'sub ATA_SC_UNLOAD_SUP () {0x2000;}' unless defined(&ATA_SC_UNLOAD_SUP);
    eval 'sub ATA_SC_WRITE_FUA_EXT_SUP () {0x1000;}' unless defined(&ATA_SC_WRITE_FUA_EXT_SUP);
    eval 'sub ATA_SC_GPL_SUP () {0x800;}' unless defined(&ATA_SC_GPL_SUP);
    eval 'sub ATA_SC_STREAMING_SUP () {0x400;}' unless defined(&ATA_SC_STREAMING_SUP);
    eval 'sub ATA_SC_SMART_SELFTEST_SUP () {0x100;}' unless defined(&ATA_SC_SMART_SELFTEST_SUP);
    eval 'sub ATA_SC_SMART_ERR_LOG_SUP () {0x80;}' unless defined(&ATA_SC_SMART_ERR_LOG_SUP);
    eval 'sub ATA_SC_EPC_SUP () {0x40;}' unless defined(&ATA_SC_EPC_SUP);
    eval 'sub ATA_SC_SENSE_SUP () {0x20;}' unless defined(&ATA_SC_SENSE_SUP);
    eval 'sub ATA_SC_FREEFALL_SUP () {0x10;}' unless defined(&ATA_SC_FREEFALL_SUP);
    eval 'sub ATA_SC_DM_MODE3_SUP () {0x8;}' unless defined(&ATA_SC_DM_MODE3_SUP);
    eval 'sub ATA_SC_GPL_DMA_SUP () {0x4;}' unless defined(&ATA_SC_GPL_DMA_SUP);
    eval 'sub ATA_SC_WRITE_UNCOR_SUP () {0x2;}' unless defined(&ATA_SC_WRITE_UNCOR_SUP);
    eval 'sub ATA_SC_WRV_SUP () {0x1;}' unless defined(&ATA_SC_WRV_SUP);
    eval 'sub ATA_DL_CODE_VALID () {0x8000000000000000;}' unless defined(&ATA_DL_CODE_VALID);
    eval 'sub ATA_DLC_DM_OFFSETS_DEFER_SUP () {0x400000000;}' unless defined(&ATA_DLC_DM_OFFSETS_DEFER_SUP);
    eval 'sub ATA_DLC_DM_IMMED_SUP () {0x200000000;}' unless defined(&ATA_DLC_DM_IMMED_SUP);
    eval 'sub ATA_DLC_DM_OFF_IMMED_SUP () {0x100000000;}' unless defined(&ATA_DLC_DM_OFF_IMMED_SUP);
    eval 'sub ATA_DLC_DM_MAX_XFER_SIZE_MASK () {0xffff0000;}' unless defined(&ATA_DLC_DM_MAX_XFER_SIZE_MASK);
    eval 'sub ATA_DLC_DM_MAX_XFER_SIZE_SHIFT () {16;}' unless defined(&ATA_DLC_DM_MAX_XFER_SIZE_SHIFT);
    eval 'sub ATA_DLC_DM_MIN_XFER_SIZE_MASK () {0xffff;}' unless defined(&ATA_DLC_DM_MIN_XFER_SIZE_MASK);
    eval 'sub ATA_NOM_MEDIA_ROTATION_VALID () {0x8000000000000000;}' unless defined(&ATA_NOM_MEDIA_ROTATION_VALID);
    eval 'sub ATA_ROTATION_MASK () {0xffff;}' unless defined(&ATA_ROTATION_MASK);
    eval 'sub ATA_FORM_FACTOR_VALID () {0x8000000000000000;}' unless defined(&ATA_FORM_FACTOR_VALID);
    eval 'sub ATA_FF_MASK () {0xf;}' unless defined(&ATA_FF_MASK);
    eval 'sub ATA_FF_NOT_REPORTED () {0x;}' unless defined(&ATA_FF_NOT_REPORTED);
    eval 'sub ATA_FF_525_IN () {0x1;}' unless defined(&ATA_FF_525_IN);
    eval 'sub ATA_FF_35_IN () {0x2;}' unless defined(&ATA_FF_35_IN);
    eval 'sub ATA_FF_25_IN () {0x3;}' unless defined(&ATA_FF_25_IN);
    eval 'sub ATA_FF_18_IN () {0x4;}' unless defined(&ATA_FF_18_IN);
    eval 'sub ATA_FF_LT_18_IN () {0x5;}' unless defined(&ATA_FF_LT_18_IN);
    eval 'sub ATA_FF_MSATA () {0x6;}' unless defined(&ATA_FF_MSATA);
    eval 'sub ATA_FF_M2 () {0x7;}' unless defined(&ATA_FF_M2);
    eval 'sub ATA_FF_MICROSSD () {0x8;}' unless defined(&ATA_FF_MICROSSD);
    eval 'sub ATA_FF_CFAST () {0x9;}' unless defined(&ATA_FF_CFAST);
    eval 'sub ATA_WRV_MODE3_VALID () {0x8000000000000000;}' unless defined(&ATA_WRV_MODE3_VALID);
    eval 'sub ATA_WRV_MODE3_COUNT () {0xffffffff;}' unless defined(&ATA_WRV_MODE3_COUNT);
    eval 'sub ATA_WRV_MODE2_VALID () {0x8000000000000000;}' unless defined(&ATA_WRV_MODE2_VALID);
    eval 'sub ATA_WRV_MODE2_COUNT () {0xffffffff;}' unless defined(&ATA_WRV_MODE2_COUNT);
    eval 'sub ATA_DSM_VALID () {0x8000000000000000;}' unless defined(&ATA_DSM_VALID);
    eval 'sub ATA_LB_MARKUP_SUP () {0xff00;}' unless defined(&ATA_LB_MARKUP_SUP);
    eval 'sub ATA_TRIM_SUP () {0x1;}' unless defined(&ATA_TRIM_SUP);
    eval 'sub ATA_UTIL_USAGE_RATE_VALID () {0x8000000000000000;}' unless defined(&ATA_UTIL_USAGE_RATE_VALID);
    eval 'sub ATA_SETTING_RATE_SUP () {0x800000;}' unless defined(&ATA_SETTING_RATE_SUP);
    eval 'sub ATA_SINCE_POWERON_SUP () {0x100;}' unless defined(&ATA_SINCE_POWERON_SUP);
    eval 'sub ATA_POH_RATE_SUP () {0x10;}' unless defined(&ATA_POH_RATE_SUP);
    eval 'sub ATA_DATE_TIME_RATE_SUP () {0x1;}' unless defined(&ATA_DATE_TIME_RATE_SUP);
    eval 'sub ATA_ZONED_VALID () {0x8000000000000000;}' unless defined(&ATA_ZONED_VALID);
    eval 'sub ATA_ZONED_MASK () {0x3;}' unless defined(&ATA_ZONED_MASK);
    eval 'sub ATA_SUP_ZAC_CAP_VALID () {0x8000000000000000;}' unless defined(&ATA_SUP_ZAC_CAP_VALID);
    eval 'sub ATA_ND_RWP_SUP () {0x10;}' unless defined(&ATA_ND_RWP_SUP);
    eval 'sub ATA_ND_FINISH_ZONE_SUP () {0x8;}' unless defined(&ATA_ND_FINISH_ZONE_SUP);
    eval 'sub ATA_ND_CLOSE_ZONE_SUP () {0x4;}' unless defined(&ATA_ND_CLOSE_ZONE_SUP);
    eval 'sub ATA_ND_OPEN_ZONE_SUP () {0x2;}' unless defined(&ATA_ND_OPEN_ZONE_SUP);
    eval 'sub ATA_REPORT_ZONES_SUP () {0x1;}' unless defined(&ATA_REPORT_ZONES_SUP);
    eval 'sub ATA_ZDI_HEADER_VALID () {0x8000000000000000;}' unless defined(&ATA_ZDI_HEADER_VALID);
    eval 'sub ATA_ZDI_PAGE_NUM_MASK () {0xff0000;}' unless defined(&ATA_ZDI_PAGE_NUM_MASK);
    eval 'sub ATA_ZDI_PAGE_NUM_SHIFT () {16;}' unless defined(&ATA_ZDI_PAGE_NUM_SHIFT);
    eval 'sub ATA_ZDI_REV_MASK () {0xff;}' unless defined(&ATA_ZDI_REV_MASK);
    eval 'sub ATA_ZDI_CAP_VALID () {0x8000000000000000;}' unless defined(&ATA_ZDI_CAP_VALID);
    eval 'sub ATA_ZDI_CAP_URSWRZ () {0x1;}' unless defined(&ATA_ZDI_CAP_URSWRZ);
    eval 'sub ATA_ZDI_SETTINGS_VALID () {0x8000000000000000;}' unless defined(&ATA_ZDI_SETTINGS_VALID);
    eval 'sub ATA_ZDI_OPT_SEQ_VALID () {0x8000000000000000;}' unless defined(&ATA_ZDI_OPT_SEQ_VALID);
    eval 'sub ATA_ZDI_OPT_SEQ_MASK () {0xffffffff;}' unless defined(&ATA_ZDI_OPT_SEQ_MASK);
    eval 'sub ATA_ZDI_OPT_NS_VALID () {0x8000000000000000;}' unless defined(&ATA_ZDI_OPT_NS_VALID);
    eval 'sub ATA_ZDI_OPT_NS_MASK () {0xffffffff;}' unless defined(&ATA_ZDI_OPT_NS_MASK);
    eval 'sub ATA_ZDI_MAX_SEQ_VALID () {0x8000000000000000;}' unless defined(&ATA_ZDI_MAX_SEQ_VALID);
    eval 'sub ATA_ZDI_MAX_SEQ_MASK () {0xffffffff;}' unless defined(&ATA_ZDI_MAX_SEQ_MASK);
    eval 'sub ATA_ZDI_VER_VALID () {0x8000000000000000;}' unless defined(&ATA_ZDI_VER_VALID);
    eval 'sub ATA_ZDI_VER_ZAC_SUP () {0x100000000000000;}' unless defined(&ATA_ZDI_VER_ZAC_SUP);
    eval 'sub ATA_ZDI_VER_ZAC_MASK () {0xff;}' unless defined(&ATA_ZDI_VER_ZAC_MASK);
    eval 'sub ATA_CMD_CONTROL () {0x1;}' unless defined(&ATA_CMD_CONTROL);
    eval 'sub ATA_CMD_READ () {0x2;}' unless defined(&ATA_CMD_READ);
    eval 'sub ATA_CMD_WRITE () {0x4;}' unless defined(&ATA_CMD_WRITE);
    eval 'sub ATA_CMD_ATAPI () {0x8;}' unless defined(&ATA_CMD_ATAPI);
    eval 'sub ATA_SECURITY_PASSWORD_USER () {0x;}' unless defined(&ATA_SECURITY_PASSWORD_USER);
    eval 'sub ATA_SECURITY_PASSWORD_MASTER () {0x1;}' unless defined(&ATA_SECURITY_PASSWORD_MASTER);
    eval 'sub ATA_SECURITY_ERASE_NORMAL () {0x;}' unless defined(&ATA_SECURITY_ERASE_NORMAL);
    eval 'sub ATA_SECURITY_ERASE_ENHANCED () {0x2;}' unless defined(&ATA_SECURITY_ERASE_ENHANCED);
    eval 'sub ATA_SECURITY_LEVEL_HIGH () {0x;}' unless defined(&ATA_SECURITY_LEVEL_HIGH);
    eval 'sub ATA_SECURITY_LEVEL_MAXIMUM () {0x100;}' unless defined(&ATA_SECURITY_LEVEL_MAXIMUM);
    eval 'sub IOCATAREQUEST () { &_IOWR(ord(\'a\'), 100, \'struct ata_ioc_request\');}' unless defined(&IOCATAREQUEST);
    eval 'sub IOCATAGPARM () { &_IOR(ord(\'a\'), 101, \'struct ata_params\');}' unless defined(&IOCATAGPARM);
    eval 'sub IOCATAGMODE () { &_IOR(ord(\'a\'), 102, \'int\');}' unless defined(&IOCATAGMODE);
    eval 'sub IOCATASMODE () { &_IOW(ord(\'a\'), 103, \'int\');}' unless defined(&IOCATASMODE);
    eval 'sub IOCATAGSPINDOWN () { &_IOR(ord(\'a\'), 104, \'int\');}' unless defined(&IOCATAGSPINDOWN);
    eval 'sub IOCATASSPINDOWN () { &_IOW(ord(\'a\'), 105, \'int\');}' unless defined(&IOCATASSPINDOWN);
    eval 'sub AR_JBOD () {0x1;}' unless defined(&AR_JBOD);
    eval 'sub AR_SPAN () {0x2;}' unless defined(&AR_SPAN);
    eval 'sub AR_RAID0 () {0x4;}' unless defined(&AR_RAID0);
    eval 'sub AR_RAID1 () {0x8;}' unless defined(&AR_RAID1);
    eval 'sub AR_RAID01 () {0x10;}' unless defined(&AR_RAID01);
    eval 'sub AR_RAID3 () {0x20;}' unless defined(&AR_RAID3);
    eval 'sub AR_RAID4 () {0x40;}' unless defined(&AR_RAID4);
    eval 'sub AR_RAID5 () {0x80;}' unless defined(&AR_RAID5);
    eval 'sub AR_READY () {1;}' unless defined(&AR_READY);
    eval 'sub AR_DEGRADED () {2;}' unless defined(&AR_DEGRADED);
    eval 'sub AR_REBUILDING () {4;}' unless defined(&AR_REBUILDING);
    eval 'sub AR_DISK_ONLINE () {0x1;}' unless defined(&AR_DISK_ONLINE);
    eval 'sub AR_DISK_PRESENT () {0x2;}' unless defined(&AR_DISK_PRESENT);
    eval 'sub AR_DISK_SPARE () {0x4;}' unless defined(&AR_DISK_SPARE);
    eval 'sub IOCATARAIDCREATE () { &_IOWR(ord(\'a\'), 200, \'struct ata_ioc_raid_config\');}' unless defined(&IOCATARAIDCREATE);
    eval 'sub IOCATARAIDDELETE () { &_IOW(ord(\'a\'), 201, \'int\');}' unless defined(&IOCATARAIDDELETE);
    eval 'sub IOCATARAIDSTATUS () { &_IOWR(ord(\'a\'), 202, \'struct ata_ioc_raid_status\');}' unless defined(&IOCATARAIDSTATUS);
    eval 'sub IOCATARAIDADDSPARE () { &_IOW(ord(\'a\'), 203, \'struct ata_ioc_raid_config\');}' unless defined(&IOCATARAIDADDSPARE);
    eval 'sub IOCATARAIDREBUILD () { &_IOW(ord(\'a\'), 204, \'int\');}' unless defined(&IOCATARAIDREBUILD);
}
1;
