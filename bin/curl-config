#!/bin/sh
#***************************************************************************
#                                  _   _ ____  _
#  Project                     ___| | | |  _ \| |
#                             / __| | | | |_) | |
#                            | (__| |_| |  _ <| |___
#                             \___|\___/|_| \_\_____|
#
# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://curl.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
# SPDX-License-Identifier: curl
#
###########################################################################

prefix="/usr/local"
# Used in ${exec_prefix}/lib
# shellcheck disable=SC2034
exec_prefix=${prefix}
# shellcheck disable=SC2034
includedir=${prefix}/include
cppflag_curl_staticlib=

usage()
{
  cat <<EOF
Usage: curl-config [OPTION]

Available values for OPTION include:

  --built-shared says 'yes' if libcurl was built shared
  --ca                  CA bundle install path
  --cc                  compiler
  --cflags              preprocessor and compiler flags
  --checkfor [version]  check for (lib)curl of the specified version
  --configure           the arguments given to configure when building curl
  --features            newline separated list of enabled features
  --help                display this help and exit
  --libs                library linking information
  --prefix              curl install prefix
  --protocols           newline separated list of enabled protocols
  --ssl-backends        output the SSL backends libcurl was built to support
  --static-libs         static libcurl library linking information
  --version             output version information
  --vernum              output version as a hexadecimal number
EOF

  exit "$1"
}

if test "$#" -eq 0; then
  usage 1
fi

while test "$#" -gt 0; do
  case "$1" in
  --built-shared)
    echo 'yes'
    ;;

  --ca)
    echo ''
    ;;

  --cc)
    echo 'cc'
    ;;

  --prefix)
    echo "$prefix"
    ;;

  --feature|--features)
    for feature in AsynchDNS HSTS HTTP2 HTTPS-proxy IPv6 Largefile NTLM PSL SSL UnixSockets alt-svc libz threadsafe ""; do
      test -n "$feature" && echo "$feature"
    done
    ;;

  --protocols)
    # shellcheck disable=SC2043
    for protocol in DICT FILE FTP FTPS GOPHER GOPHERS HTTP HTTPS IMAP IMAPS IPFS IPNS POP3 POP3S RTSP SMTP SMTPS TELNET TFTP; do
      echo "$protocol"
    done
    ;;

  --version)
    echo 'libcurl 8.8.0'
    exit 0
    ;;

  --checkfor)
    checkfor=$2
    cmajor=$(echo "$checkfor" | cut -d. -f1)
    cminor=$(echo "$checkfor" | cut -d. -f2)
    # when extracting the patch part we strip off everything after a
    # dash as that's used for things like version 1.2.3-pre1
    cpatch=$(echo "$checkfor" | cut -d. -f3 | cut -d- -f1)

    vmajor=$(echo '8.8.0' | cut -d. -f1)
    vminor=$(echo '8.8.0' | cut -d. -f2)
    # when extracting the patch part we strip off everything after a
    # dash as that's used for things like version 1.2.3-pre1
    vpatch=$(echo '8.8.0' | cut -d. -f3 | cut -d- -f1)

    if test "$vmajor" -gt "$cmajor"; then
      exit 0
    fi
    if test "$vmajor" -eq "$cmajor"; then
      if test "$vminor" -gt "$cminor"; then
        exit 0
      fi
      if test "$vminor" -eq "$cminor"; then
        if test "$cpatch" -le "$vpatch"; then
          exit 0
        fi
      fi
    fi

    echo "requested version $checkfor is newer than existing 8.8.0"
    exit 1
    ;;

  --vernum)
    echo '080800'
    exit 0
    ;;

  --help)
    usage 0
    ;;

  --cflags)
    if test "X$cppflag_curl_staticlib" = "X-DCURL_STATICLIB"; then
      CPPFLAG_CURL_STATICLIB="-DCURL_STATICLIB "
    else
      CPPFLAG_CURL_STATICLIB=""
    fi
    if test "X${prefix}/include" = "X/usr/include"; then
      echo "${CPPFLAG_CURL_STATICLIB}"
    else
      echo "${CPPFLAG_CURL_STATICLIB}-I${prefix}/include"
    fi
    ;;

  --libs)
    if test "X${exec_prefix}/lib" != "X/usr/lib" -a "X${exec_prefix}/lib" != "X/usr/lib64"; then
      CURLLIBDIR="-L${exec_prefix}/lib "
    else
      CURLLIBDIR=""
    fi
    if test "Xyes" = "Xno"; then
      echo "${CURLLIBDIR}-lcurl -lnghttp2 -lpsl -lssl -lcrypto -lz -L/usr/local/lib -pthread"
    else
      echo "${CURLLIBDIR}-lcurl"
    fi
    ;;

  --ssl-backends)
    echo 'OpenSSL v3+'
    ;;

  --static-libs)
    if test "Xyes" != "Xno" ; then
      echo "${exec_prefix}/lib/libcurl.a" -L/usr/local/lib -Wl,-rpath,/usr/local/lib -L/usr/local/lib -Wl,-rpath,/usr/local/lib -fstack-protector-strong -L/lib -L/usr/local/lib -L/usr/local/lib -L/usr/local/lib -lnghttp2 -lpsl -lssl -lcrypto -lz -L/usr/local/lib -pthread
    else
      echo 'curl was built with static libraries disabled' >&2
      exit 1
    fi
    ;;

  --configure)
    echo " '--disable-werror' '--enable-dateparse' '--enable-dnsshuffle' '--enable-headers-api' '--enable-hsts' '--enable-http-auth' '--enable-mime' '--enable-netrc' '--enable-openssl-auto-load-config' '--enable-progress-meter' '--with-zsh-functions-dir=/usr/local/share/zsh/site-functions' '--without-ca-bundle' '--without-ca-path' '--without-fish-functions-dir' '--enable-alt-svc' '--without-brotli' '--disable-ares' '--enable-cookies' '--disable-curldebug' '--disable-debug' '--enable-dict' '--enable-ftp' '--without-gnutls' '--enable-gopher' '--without-gssapi' '--enable-http' '--with-nghttp2' '--without-libidn2' '--enable-imap' '--enable-ipv6' '--disable-ldap' '--disable-ldaps' '--without-libssh' '--without-libssh2' '--disable-mqtt' '--enable-ntlm' '--with-openssl=/usr/local' '--with-ca-fallback' '--enable-pop3' '--enable-proxy' '--with-libpsl' '--enable-rtsp' '--disable-smb' '--enable-smtp' '--enable-static' '--enable-telnet' '--enable-tftp' '--enable-pthreads' '--enable-threaded-resolver' '--disable-tls-srp' '--disable-websockets' '--without-wolfssl' '--without-zstd' '--prefix=/usr/local' '--localstatedir=/var' '--mandir=/usr/local/share/man' '--disable-silent-rules' '--infodir=/usr/local/share/info/' '--build=amd64-portbld-freebsd14.1' 'build_alias=amd64-portbld-freebsd14.1' 'CC=cc' 'CFLAGS=-O2 -pipe  -fstack-protector-strong -isystem /usr/local/include -fno-strict-aliasing ' 'LDFLAGS= -L/usr/local/lib -Wl,-rpath,/usr/local/lib -L/usr/local/lib -Wl,-rpath,/usr/local/lib -fstack-protector-strong ' 'LIBS=-L/usr/local/lib' 'CPPFLAGS=-I/usr/local/include -isystem /usr/local/include' 'CPP=cpp'"
    ;;

  *)
    echo "unknown option: $1"
    usage 1
    ;;
  esac
  shift
done

exit 0
